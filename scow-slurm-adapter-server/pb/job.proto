syntax = "proto3"; // 版本声明，使用Protocol Buffers v3版本

option go_package = "scow-slurm-adapter-server/pb;pb"; // 指定编译生成的文件目录，也可以指定golang包名

package pb; // 默认包名

import "google/protobuf/timestamp.proto";

message JobInfo {
  uint32 job_id = 1;
  string name = 2;
  string account = 3;
  string partition = 4;
  string qos = 5;
  /**
   * The job state field must include the following states:
   * PENDING, RUNNING, CANCELED, COMPLETED
   * - PENDING: 
   *   A state indicating that a job has been submitted 
   *   and is waiting for further action before it can be started.
   * - RUNNING:
   *   A state indicating that a job is currently in progress 
   *   and is actively being worked on or executed.
   * - CANCELED:
   *   A state indicating that a job has been terminated prematurely 
   *   and will not be completed as originally intended.
   * - COMPLETED:
   *   A state indicating that a job has been successfully finished 
   *   and has reached its intended conclusion.
   * Other possible states should be represented in uppercase letters.
   */
  string state = 6;
  // the number of CPUs requested by job
  int32 cpus_req = 7;
  // memory requested by job
  int64 mem_req_mb = 8;
  // the number of nodes requested by job
  int32 nodes_req = 9;
  int64 time_limit_minutes = 10;
  google.protobuf.Timestamp submit_time = 11;
  string working_directory = 12;
  // name of the file that stdout outputs to, relative to the working directory.
  string stdout_path = 13;
  // name of the file that stderr outputs to, relative to the working directory.
  string stderr_path = 14;
  optional google.protobuf.Timestamp start_time = 15;
  optional int64 elapsed_seconds = 16;
  // indicates why is the job in this state
  optional string reason = 17;
  optional string node_list = 18;
  // the number of GPUs used by job
  optional int32 gpus_alloc = 19;
  // the number of CPUs used by job
  optional int32 cpus_alloc = 20;
  // memory used by job
  optional int64 mem_alloc_mb = 21;
  // the number of nodes used by job
  optional int32 nodes_alloc = 22;
  optional google.protobuf.Timestamp end_time = 23;
}


message TimeRange {
  optional google.protobuf.Timestamp start_time = 1;
  optional google.protobuf.Timestamp end_time = 2;
}
message PageInfo {
  uint32 page = 1;
  uint64 page_size = 2;
}
message GetJobsRequest {
  // required JobInfo fields
  // The value of the string corresponds to the name of each field in JobInfo
  repeated string fields = 1;

  // filter options. The logical relationship between multiple filtering options is "AND". 
  message Filter {
    optional string user = 1;
    optional string account = 2;
    optional string state = 3;
    // if set this field, return jobs that ended between the time range
    optional TimeRange end_time = 4;
  }
  // specify filter options
  optional Filter filter = 2;

  // 'page' number with a 'pagesize' pagination.
  // if not set, no pagination
  optional PageInfo page_info = 3;
}

message GetJobsResponse {
  repeated JobInfo jobs = 1;
  // page total count
  // if no pagination, don't set this field
  optional uint32 total_count = 2;
}

message GetJobByIdRequest {
  // required JobInfo fields
  // The value of the string corresponds to the name of each field in JobInfo
  repeated string fields = 1;
  uint32 job_id = 2;
}

message GetJobByIdResponse {
  JobInfo job = 1;
}

message ChangeJobTimeLimitRequest {
  string job_id = 1;
  // increase or decrease time limit
  int64 delta_minutes = 2;
}

message ChangeJobTimeLimitResponse {
}

message QueryJobTimeLimitRequest {
  string job_id = 1;
}

message QueryJobTimeLimitResponse {
  uint64 time_limit_minutes = 1;
}

message SubmitJobRequest {
  string user_id = 1;
  string job_name = 2;
  string account = 3;
  string partition = 4;
  optional string qos = 5;
  uint32 node_count = 6;
  uint32 gpu_count = 7;
  uint64 memory_mb = 8;
  uint32 core_count = 9;
  optional uint32 time_limit_minutes = 10;
  string script = 11;
  string working_directory = 12;
}

message SubmitJobResponse {
  uint32 job_id = 1;
  string generated_script = 2;
}

message CancelJobRequest {
  string user_id = 1;
  int32 job_id = 2;
}

message CancelJobResponse {
}

service JobService {
  
  /*
   * description: get jobs with filter options
   * special case: 
   * - some of fields not exist, discard them
   */
  rpc GetJobs(GetJobsRequest) returns (GetJobsResponse);

  /*
   * description: get job info by id
   * special case: 
   * - job id not exist, don't throw
   * - some of fields not exist, discard them
   */
  rpc GetJobById (GetJobByIdRequest) returns (GetJobByIdResponse);

  /*
   * description: change a job's time limit 
   * errors: 
   * - job not found
   *   NOT_FOUND, JOB_NOT_FOUND, {}
   */
  rpc ChangeJobTimeLimit(ChangeJobTimeLimitRequest) returns (ChangeJobTimeLimitResponse);

  /*
   * description: query time limit
   * errors: 
   * - job not found
   *   NOT_FOUND, JOB_NOT_FOUND, {}
   */
  rpc QueryJobTimeLimit(QueryJobTimeLimitRequest) returns (QueryJobTimeLimitResponse);

  /*
   * description: submit job 
   * errors: 
   * - sbatch failed
   *   UNKNOWN, SBATCH_FAILED, {
   *     reason: string
   *   }
   * - user not exist
   *   NOT_FOUND, USER_NOT_FOUND, {}
   */
  rpc SubmitJob(SubmitJobRequest) returns (SubmitJobResponse);


  /*
   * description: cancel a job
   * errors: 
   * - user not exist
   *   NOT_FOUND, USER_NOT_FOUND, {}
   * - job not found
   *   NOT_FOUND, JOB_NOT_FOUND, {}
   */
  rpc CancelJob(CancelJobRequest) returns (CancelJobResponse);
}