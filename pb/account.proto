syntax = "proto3"; // 版本声明，使用Protocol Buffers v3版本

option go_package = "scow-slurm-adapter-server/pb;pb"; // 指定编译生成的文件目录，也可以指定golang包名

package pb; // 默认包名

message ListAccountsRequest {
    string user_id = 1;
  }
  
  message ListAccountsResponse {
    repeated string accounts = 1;
  }
  
  message CreateAccountRequest {
    string account_name = 1;
    string owner_user_id = 2;
  }
  
  message CreateAccountResponse {
  }
  
  message BlockAccountRequest {
    string account_name = 1;
  }
  
  message BlockAccountResponse {
  }
  
  message UnblockAccountRequest {
    string account_name = 1;
  }
  
  message UnblockAccountResponse {
  }
  
  message ClusterAccountInfo {
    message UserInAccount {
      string user_id = 1;
      string user_name = 2;
      bool blocked = 3;
    }
    string account_name = 1;
    repeated UserInAccount users = 2;
    optional string owner = 3;
    bool blocked = 4;
  }
  
  message GetAllAccountsWithUsersRequest {
  
  }
  
  message GetAllAccountsWithUsersResponse {
    repeated ClusterAccountInfo accounts = 1;
  }
  
  message QueryAccountBlockStatusRequest {
    string account_name = 1;
  }
  
  message QueryAccountBlockStatusResponse {
    bool blocked = 1;
  }
  
  service AccountService {
    
    /**
     * description: list accounts for a user
     * errors: 
     * - user not exist
     *   NOT_FOUND, USER_NOT_FOUND, {}
     */
    rpc ListAccounts(ListAccountsRequest) returns (ListAccountsResponse);
  
    /*
     * description: create account and specify owner
     * errors:
     * - account exist
     *   ALREADY_EXISTS, ACCOUNT_ALREADY_EXISTS, {}
     * - owner id not exist
     *   NOT_FOUND, USER_NOT_FOUND, {} 
     */
    rpc CreateAccount(CreateAccountRequest) returns (CreateAccountResponse);
  
    /*
     * description: block an account 
     * errors: 
     * - account not exist
     *   NOT_FOUND, ACCOUNT_NOT_FOUND, {}
     * special case:
     * - account already blocked, don't throw error
     */
    rpc BlockAccount(BlockAccountRequest) returns (BlockAccountResponse);
  
    /*
     * description: unblock an account 
     * errors: 
     * - account not exist
     *   NOT_FOUND, ACCOUNT_NOT_FOUND, {}
     * special case:
     * - account already unblocked, don't throw error
     */
    rpc UnblockAccount(UnblockAccountRequest) returns (UnblockAccountResponse);
  
    /*
     * description: get all accounts and all associated users
     * special case:
     * - account no users, exclude this account
     */
    rpc GetAllAccountsWithUsers(GetAllAccountsWithUsersRequest) returns (GetAllAccountsWithUsersResponse);
  
    /*
     * description: query if an account is blocked
     * errors: 
     * - account not exist
     *   NOT_FOUND, ACCOUNT_NOT_FOUND, {}
     */
    rpc QueryAccountBlockStatus(QueryAccountBlockStatusRequest) returns (QueryAccountBlockStatusResponse);
  }